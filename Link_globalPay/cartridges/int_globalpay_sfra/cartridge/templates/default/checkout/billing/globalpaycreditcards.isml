  <isset name="gp_AuthenticationsUrl" value="${require('dw/web/URLUtils').url('GlobalPay-Authentications').toString()}" scope="page"/>
 <form id="payment-form" action="/Payment/Charge" method="post">
    <div id="credit-card"></div>
</form>

<script src="${URLUtils.staticURL('/js/local-globalpayments.js')}"></script>
<script src="${URLUtils.staticURL('/js/globalpayments-3ds.js')}"></script>
<link rel="stylesheet" href="${URLUtils.staticURL('/css/paymentbuttons.css')}" />
<script defer type="text/javascript">
// Configure account
GlobalPayments.configure({
    accessToken: '${pdict.token}',
    env: '${pdict.env}', // or "production"
    currency: '${pdict.currency}',
    country:'${pdict.country}',
    gpaymerchantid:'${pdict.gpaymerchantid}',
    gpaymerchantname:'${pdict.gpaymerchantname}',
    gpayenv:'${pdict.gpayenv}'
});

// Create Form
const cardForm = GlobalPayments.creditCard.form("#credit-card", { style: "local-gp-default" });

const cvvList = document.querySelectorAll("#saved-payment-security-code");
if (cvvList.length) {
  for (let i = 0; i < cvvList.length; i++) {
    cvvList[i].addEventListener("keypress", isNumberKey, false);
    }
}

function isNumberKey(evt){
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode == 46 || charCode > 31 && (charCode < 48 || charCode > 57)){
        evt.preventDefault();
        return false;
    }
    return true;
}

cardForm.on("token-success", (resp) => {
    // add payment token to form as a hidden input
    const token = document.createElement("input");
    token.type = "hidden";
    token.name = "payment_token";
    token.value = resp.paymentReference;
    $('.gpayerror').text('');
    $("input[name='dwfrm_billing_creditCardFields_cardNumber']").val(resp.details.cardNumber);
    $('#cardType').val(resp.details.cardType.charAt(0).toUpperCase()+resp.details.cardType.substring(1, resp.details.cardType.length));
    $("#expirationMonth").val(parseInt(resp.details.expiryMonth, 10));
    $("#expirationYear").val(resp.details.expiryYear);
    $("#paymentId").val(JSON.stringify(resp));
    $("#cardOwner").val(resp.details.cardholderName?resp.details.cardholderName:$("#billingFirstName").val());
    var eciData = JSON.parse($('#eciData').val());
    if($("#expirationYear").val()){
    var pmttoken = $('#isnewcard').val()?resp.paymentReference : $('.saved-payment-instrument' + '.selected-payment').data('pmt');
         if($('#isnewcard').val()){
        var cartData = {
           amount : parseInt(parseFloat($('.grand-total-sum').text().replace('$', '').replace(',', '')) *100),
           address1: $('input[name*="shippingAddress_addressFields_address1"]').val(),
           city: $('input[name*="shippingAddress_addressFields_city"]').val(),
           postalcode : $('input[name*="shippingAddress_addressFields_postalCode"]').val()
         };
          const {
                checkVersion,
                getBrowserData,
                initiateAuthentication,
                ChallengeWindowSize,
            } = GlobalPayments.ThreeDSecure;
            try {
                 checkVersion('GlobalPay-Authentication', {
                        card: {
                            reference: pmttoken,
                            cartData:cartData
                        },
                    }).then( function( versionCheckData ) {
                        if(versionCheckData.versions.directoryServer.start == '1.0.0'
                            && versionCheckData.versions.directoryServer.end == '1.0.0' ){
                                if(versionCheckData.enrolled=='ENROLLED' )
                                {
                                $("#authId").val(versionCheckData.id);
                                $("#paReq").val(versionCheckData.challengevalue);
                                $("#acsUrl").val(versionCheckData.acschallengerequesturl);
                                $("#isthreeds").val('threeDs1');
                                }
                                else{
                                $("#authId").val(versionCheckData.id);
                                $("#isthreeds").val(versionCheckData.serverTransactionId);
                                }
                        $( ".submit-payment" ).trigger( "click" );
                        } else if ( versionCheckData.error ) {

                        }else{
                         $("#authId").val(versionCheckData.id);
                                try {
                                    authenticationData = initiateAuthentication('GlobalPay-Initiation', {
                                    serverTransactionId: versionCheckData.serverTransactionId,
                                    challengeNotificationUrl:'',
                                    authId: versionCheckData.id,
                                    methodUrlComplete: true,
                                    card: {
                                        reference:pmttoken,
                                         cartData:cartData
                                    },
                                    challengeWindow: {
                                        windowSize: ChallengeWindowSize.Windowed600x400,
                                        displayMode: 'lightbox',
                                    }
                                }).then(function(authenticationData){
                                    $("#isthreeds").val(authenticationData.status);
                                    if (authenticationData.mpi != undefined){
                                    var eci = authenticationData.mpi.eci;
                                      if (authenticationData.status !== "CHALLENGE_REQUIRED") {
                                            if (eci === eciData.five || eci === eciData.six || eci === eciData.one || eci === eciData.two) {                                            
                                                $( ".submit-payment" ).trigger( "click" );
                                            } else {
                                                 $('.gpayerror').text('Card got declined, please enter another card.');
                                            }
                                    }
                                    else {
                                        if (JSON.parse(authenticationData.challenge.response.data).transStatus === "Y") {
                                           $( ".submit-payment" ).trigger( "click" );
                                        } else {
                                            
                                             $('.gpayerror').text('Card got declined, please enter another card.');
                                        }
                                    }
                                    } else {
                                         $('.gpayerror').text('Card got declined, please enter another card.');
                                    }
                                }).catch(function(error){
                                   $('.gpayerror').text('Unable to process your request, please try again or use another card.');
                                 });
                               
                                }
                                catch(e){
                                }
                        }
                    }).catch(function(error){
                         $('.gpayerror').text('Unable to process your request, please try again or use another card.');
                    });
                 }
                 catch (e) {
                 }
         }
    form.appendChild(token);
    form.submit();
    }
    else{
      $('.gpayerror').text('Card details are not valid, please enter valid card details.');
    }
});

cardForm.on("token-error", (resp) => {
    $('.gpayerror').text('Card details are not valid, please enter valid card details.');
});
</script>
