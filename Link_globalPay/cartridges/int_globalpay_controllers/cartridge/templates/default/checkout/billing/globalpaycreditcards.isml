  <isset name="gp_AuthenticationsUrl" value="${require('dw/web/URLUtils').url('GlobalPay-Authentications').toString()}" scope="page"/>
 <div class="gpayerror"></div>
 <form id="payment-form" action="/Payment/Charge" method="post">
    <div id="credit-card"></div>
</form>
<isset name="Url" value="${require('dw/web/URLUtils').url('GlobalPay-Authentication').toString()}" scope="page"/>
<script src="${URLUtils.staticURL('/js/local-globalpayments.js')}"></script>
<link rel="stylesheet" href="${URLUtils.staticURL('/css/paymentbuttons.css')}" />



<script type="text/javascript">
// Configure account
GlobalPayments.configure({
    accessToken: '${pdict.gpayToken}',
    env: '${pdict.preferences.env}', // or "production"
    currency: '${pdict.currency}',
    country:'${pdict.country}',
    gpaymerchantid:'${pdict.preferences.gpayMerchantId}',
    gpaymerchantname:'${pdict.preferences.gpayMerchantName}',
    gpayenv:'${pdict.preferences.gpayEnv}'
});

// Create Form
const cardForm = GlobalPayments.creditCard.form("#credit-card", { style: "local-gp-default" });


const cvvList = document.querySelectorAll("#saved-payment-security-code");
if (cvvList.length) {
  for (let i = 0; i < cvvList.length; i++) {
    cvvList[i].addEventListener("keypress", isNumberKey, false);
    }
}

function isNumberKey(evt){
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode == 46 || charCode > 31 && (charCode < 48 || charCode > 57)){
        evt.preventDefault();
        return false;
    }
    return true;
}
cardForm.on("token-success", (resp) => {
    // add payment token to form as a hidden input
    const token = document.createElement("input");
    token.type = "hidden";
    token.name = "payment_token";
    token.value = resp.paymentReference;
    $('.gpayerror').text('');
    $('input[name*="_creditCard_owner"]').val(resp.details.cardholderName?resp.details.cardholderName:$('input[name*=_firstName]').val()).trigger('change');
    $('select[name$="_creditCard_type"]').val(resp.details.cardType.charAt(0).toUpperCase()+resp.details.cardType.substring(1, resp.details.cardType.length)).trigger('change');
    $('input[name*="_creditCard_number"]').val(resp.details.cardNumber).trigger('change');
    $('[name$="_expiration_month"]').val(parseInt(resp.details.expiryMonth, 10)).trigger('change');
    $('[name$="_expiration_year"]').val(resp.details.expiryYear).trigger('change');
    $('input[name*="_cvn"]').val(resp.details.cardSecurityCode).trigger('change');
    $('input[name*=creditCard_paymentId]').val(JSON.stringify(resp));
    var eciData = JSON.parse($('#eciData').val());
if($('[name$="_expiration_year"]').val())
{
         var cartData = {
           amount : parseFloat($('.order-total .order-value').text().replace('$','').replace(/,/g, ''))*100,
           address1: $('input[name*="_addressFields_address1"]').val(),
           city: $('input[name*="_addressFields_city"]').val(),
           postalcode : $('input[name*="_addressFields_postal"]').val()
         };
        $('[name$="_isThreedsone"]').val(false);
          const {
                checkVersion,
                getBrowserData,
                initiateAuthentication,
                ChallengeWindowSize,
            } = GlobalPayments.ThreeDSecure;

            try {
                    checkVersion($('#autenticationurl').val(),{
                        card: {
                            reference: resp.paymentReference,
                            cartData:cartData
                        },
                    }).then( function( versionCheckData ) {
                       if(versionCheckData.versions.directoryServer.start == '1.0.0'
                                && versionCheckData.versions.directoryServer.end == '1.0.0' ){
                                $('input[name*=_authId]').val(versionCheckData.id);
                       if(versionCheckData.enrolled == 'ENROLLED'){
                        placeOrderSuccess(versionCheckData);
                         $('#dwfrm_billing').submit();
                        } else {
                            $('#dwfrm_billing').submit();
                        }

                        } else  if ( versionCheckData.error ) {
                         $('.gpayerror').text('Card got declined, please enter another card.');
                        }else{
                          $('input[name*=_authId]').val(versionCheckData.id);
                                try {
                                    authenticationData = initiateAuthentication($('#initiationurl').val(),{
                                    serverTransactionId: versionCheckData.serverTransactionId,
                                    challengeNotificationUrl:'',
                                    authId: versionCheckData.id,
                                    methodUrlComplete: true,
                                    card: {
                                        reference: resp.paymentReference,
                                         cartData:cartData
                                    },
                                    challengeWindow: {
                                        windowSize: ChallengeWindowSize.Windowed600x400,
                                        displayMode: 'lightbox',
                                    }
                                }).then(function(authenticationData){
                                   $('input[name*=_isthreeds]').val(authenticationData.status);
                                   $('input[name*=_authId]').val(versionCheckData.id);
                                    
                                    
                                    if (authenticationData&&authenticationData.mpi != undefined){
                                        var eci = authenticationData.mpi.eci;
                                    if (authenticationData.status !== "CHALLENGE_REQUIRED") {
                                        if (eci === eciData.five || eci === eciData.six || eci === eciData.one || eci === eciData.two) {
                                            $('#dwfrm_billing').submit();
                                        } else {
                                                 $('.gpayerror').text('Card got declined, please enter another card.');
                                        }
                                    }// Challenge Flow
                                    else {
                                        if (JSON.parse(authenticationData.challenge.response.data).transStatus === "Y") {
                                            $('#dwfrm_billing').submit();
                                        } else {
                                             $('.gpayerror').text('Card got declined, please enter another card.');
                                        }
                                    }
                                    }
                                    else{
                                        $('.gpayerror').text('Card got declined, please enter another card.');
                                    }
                                  }).catch(function(error){
                                    $('.gpayerror').text('Unable to process your request, please try again or use another card.');
                                });
                                }
                                catch(e){
                                }
                            
                        }
                    }).catch(function(error){
                        $('.gpayerror').text('Unable to process your request, please try again or use another card.');
                      });
            
                 }

                 catch (e) {
                    
                 }

    
    form.appendChild(token);
    form.submit();
}
else
{
    $('.gpayerror').text('Card details are not valid, please enter valid card details.');
}

});

cardForm.on("token-error", (resp) => {
    // show error to the consumer
    $('.gpayerror').text('Card details are not valid, please enter valid card details.');
});
</script>